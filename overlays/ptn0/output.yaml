apiVersion: v1
data:
  configuration.yaml: |
    # global filter; messages must have at least this severity to pass:
    # Typical values would be Warning, Notice, Info or Debug
    minSeverity: Info

    # global file rotation settings:
    rotation:
      rpLogLimitBytes: 10000000
      rpKeepFilesNum:  10
      rpMaxAgeHours:   24

    # these backends are initialized:
    setupBackends:
      - KatipBK
      - EKGViewBK

    # if not indicated otherwise, then messages are passed to these backends:
    defaultBackends:
      - KatipBK

    # if wanted, the EKG interface is listening on this port:
    hasEKG: 12781

    hasPrometheus:
      - "0.0.0.0"
      - 13788

    # here we set up outputs of logging in 'katip':
    setupScribes:
      - scKind: StdoutSK
        scName: stdout
        scRotation: null

    # if not indicated otherwise, then log output is directed to this:
    defaultScribes:
      - - StdoutSK
        - stdout

    ## here we set up outputs of logging in 'katip':
    #setupScribes:
    #  #- scKind: FileSK
    #  #  scName: "/opt/cardano/cnode/logs/node-0.log"
    #  #  scFormat: ScText
    #  - scKind: FileSK
    #    scName: "/opt/cardano/cnode/logs/node-0.json"
    #    scFormat: ScJson
    #
    ## if not indicated otherwise, then log output is directed to this:
    #defaultScribes:
    #  #- - FileSK
    #  #  - "/opt/cardano/cnode/logs/node-0.log"
    #  - - FileSK
    #    - "/opt/cardano/cnode/logs/node-0.json"

    # more options which can be passed as key-value pairs:
    options:
      mapSubtrace:
        '#ekgview':
          contents:
          - - tag: Contains
              contents: 'cardano.epoch-validation.benchmark'
            - - tag: Contains
                contents: .monoclock.basic.
          - - tag: Contains
              contents: 'cardano.epoch-validation.benchmark'
            - - tag: Contains
                contents: diff.RTS.cpuNs.timed.
          - - tag: StartsWith
              contents: '#ekgview.#aggregation.cardano.epoch-validation.benchmark'
            - - tag: Contains
                contents: diff.RTS.gcNum.timed.
          subtrace: FilterTrace
        'cardano.epoch-validation.utxo-stats':
          # Change the `subtrace` value to `Neutral` in order to log
          # `UTxO`-related messages during epoch validation.
          subtrace: NoTrace
      mapBackends:
        cardano.node.ChainDB.metrics:
          - EKGViewBK
          - kind: UserDefinedBK
            name: LiveViewBackend
        cardano.node.metrics.Forge:
          - EKGViewBK
        cardano.node.metrics.Mempool:
          - EKGViewBK
        cardano.node.metrics:
          - EKGViewBK
          - kind: UserDefinedBK
            name: LiveViewBackend
        cardano.node.peers:
          - EKGViewBK
        cardano.node.BlockFetchDecision.peers:
          - EKGViewBK
          - kind: UserDefinedBK
            name: LiveViewBackend


    ##########################################################
    ############### Cardano Node Configuration ###############
    ##########################################################

    # NodeId:
    Protocol: TPraos
    NetworkName: phtn
    GenesisFile: /opt/cardano/cnode/files/genesis.json
    NumCoreNodes: 1
    RequiresNetworkMagic: RequiresMagic
    TurnOnLogging: True
    ViewMode: SimpleView
    TurnOnLogMetrics: False
    SocketPath: /opt/cardano/cnode/sockets/node0.socket

    ## For cardano-dbsync-tool
    EnableLogMetrics: False

    #####    Update Parameters    #####

    ApplicationName: cardano-sl
    ApplicationVersion: 0
    LastKnownBlockVersion-Major: 0
    LastKnownBlockVersion-Minor: 0
    LastKnownBlockVersion-Alt: 0

    #####         Tracing         #####

    # MinimalVerbosity: Minimal level of the rendering of captured items
    # MaximalVerbosity: Maximal level of the rendering of captured items
    # NormalVerbosity: the default level of the rendering of captured items
    TracingVerbosity: MaximalVerbosity

    # Trace BlockFetch client.
    TraceBlockFetchClient: True

    # Trace BlockFetch decisions made by the BlockFetch client.
    TraceBlockFetchDecisions: True

    # Trace BlockFetch protocol messages.
    TraceBlockFetchProtocol: True

    # Serialised Trace BlockFetch protocol messages.
    TraceBlockFetchProtocolSerialised: True

    # Trace BlockFetch server.
    TraceBlockFetchServer: True

    # Verbose tracer of ChainDB
    TraceChainDb: True

    # Trace ChainSync client.
    TraceChainSyncClient: True

    # Trace ChainSync server (blocks).
    TraceChainSyncBlockServer: True

    # Trace ChainSync server (headers)
    TraceChainSyncHeaderServer: True

    # Trace ChainSync protocol messages.
    TraceChainSyncProtocol: True

    # Trace DNS Resolver messages.
    TraceDNSResolver: False

    # Trace DNS Subscription messages.
    TraceDNSSubscription: False

    # Trace error policy resolution.
    TraceErrorPolicy: True

    # Trace local error policy resolution.
    TraceLocalErrorPolicy: True

    # Trace block forging.
    TraceForge: True

    # Trace Handshake protocol messages.
    TraceHandshake: True

    # Trace IP Subscription messages.
    TraceIpSubscription: True

    # Trace local ChainSync protocol messages.
    TraceLocalChainSyncProtocol: True

    # Trace local Handshake protocol messages.
    TraceLocalHandshake: False

    # Trace local TxSubmission protocol messages.
    TraceLocalTxSubmissionProtocol: True

    # Trace local TxSubmission server.
    TraceLocalTxSubmissionServer: True

    # Trace mempool.
    TraceMempool: True

    # Trace Mux Events
    TraceMux: False

    # Trace TxSubmission server (inbound transactions).
    TraceTxInbound: True

    # Trace TxSubmission client (outbound transactions).
    TraceTxOutbound: True

    # Trace TxSubmission protocol messages.
    TraceTxSubmissionProtocol: True
  initContainer-entrypoint: |
    rm -rf /opt/cardano/cnode/db/lost+found

    FILES="configuration.yaml genesis.json topology.json"

    for file in ${FILES}
    do
      test ! -e /opt/cardano/cnode/files.pvc/${file} && \
        cp /opt/cardano/cnode/files/${file} /opt/cardano/cnode/files.pvc/
    done

    if [ "${CNODE_USE_CONFIGMAP}" == "true" ]
    then
      for file in ${FILES}
      do
        test -e /configmap/${file} && \
          cp /configmap/${file} /opt/cardano/cnode/files.pvc/
      done
    fi

    chown -R nobody: /opt/cardano
kind: ConfigMap
metadata:
  annotations:
    note: this is your local k8s cluster!
  labels:
    app: cadano-node
    cardano_network: ptn0
    cardano_node_type: haskell
    environment: production
    project_name: guild-ops
  name: passive-node-configmap
  namespace: cardano-ptn0
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    note: this is your local k8s cluster!
  labels:
    cardano_network: ptn0
    cardano_node_type: haskell
    environment: production
    io.kompose.service: passive-node
    project_name: guild-ops
  name: passive-node
  namespace: cardano-ptn0
spec:
  externalTrafficPolicy: Cluster
  ports:
  - name: p2p
    nodePort: 30201
    port: 30201
    protocol: TCP
    targetPort: 30201
  selector:
    cardano_network: ptn0
    cardano_node_type: haskell
    environment: production
    io.kompose.service: passive-node
    project_name: guild-ops
  sessionAffinity: None
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    note: this is your local k8s cluster!
  labels:
    app.kubernetes.io/name: passive-node-metrics
    cardano_network: ptn0
    cardano_node_type: haskell
    environment: production
    project_name: guild-ops
  name: passive-node-metrics
  namespace: cardano-ptn0
spec:
  ports:
  - name: metrics
    port: 13788
    protocol: TCP
    targetPort: 13788
  selector:
    cardano_network: ptn0
    cardano_node_type: haskell
    environment: production
    io.kompose.service: passive-node
    project_name: guild-ops
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    note: this is your local k8s cluster!
  labels:
    cardano_network: ptn0
    cardano_node_type: haskell
    environment: production
    io.kompose.service: passive-node
    project_name: guild-ops
  name: passive-node
  namespace: cardano-ptn0
spec:
  replicas: 1
  selector:
    matchLabels:
      cardano_network: ptn0
      cardano_node_type: haskell
      environment: production
      io.kompose.service: passive-node
      project_name: guild-ops
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        note: this is your local k8s cluster!
      labels:
        cardano_network: ptn0
        cardano_node_type: haskell
        environment: production
        io.kompose.service: passive-node
        project_name: guild-ops
    spec:
      containers:
      - env:
        - name: CNODE_PORT
          value: "30201"
        - name: CNODE_HOST_ADDR
          value: 0.0.0.0
        - name: CNODE_USE_CONFIGMAP
          value: "true"
        image: rcmorano/cardano-node:guild-ops-ptn0-passive-202005290039-2eeb27d-4b71fc8
        imagePullPolicy: Always
        name: passive-node
        ports:
        - containerPort: 30201
        - containerPort: 13788
        resources: {}
        volumeMounts:
        - mountPath: /opt/cardano/cnode/files
          name: passive-node-files
        - mountPath: /opt/cardano/cnode/priv
          name: passive-node-priv
        - mountPath: /opt/cardano/cnode/db
          name: passive-node-db
        - mountPath: /opt/cardano/cnode/logs
          name: passive-node-logs
        - mountPath: /configmap
          name: configmap
      initContainers:
      - command:
        - bash
        - /configmap/initContainer-entrypoint
        env:
        - name: CNODE_PORT
          value: "30201"
        - name: CNODE_HOST_ADDR
          value: 0.0.0.0
        - name: CNODE_USE_CONFIGMAP
          value: "true"
        image: rcmorano/cardano-node:guild-ops-ptn0-passive-202005290039-2eeb27d-4b71fc8
        imagePullPolicy: Always
        name: configure
        volumeMounts:
        - mountPath: /opt/cardano/cnode/files.pvc
          name: passive-node-files
        - mountPath: /opt/cardano/cnode/priv
          name: passive-node-priv
        - mountPath: /opt/cardano/cnode/db
          name: passive-node-db
        - mountPath: /opt/cardano/cnode/logs
          name: passive-node-logs
        - mountPath: /configmap
          name: configmap
      restartPolicy: Always
      serviceAccountName: ""
      volumes:
      - name: passive-node-files
        persistentVolumeClaim:
          claimName: passive-node-files
      - name: passive-node-priv
        persistentVolumeClaim:
          claimName: passive-node-priv
      - name: passive-node-db
        persistentVolumeClaim:
          claimName: passive-node-db
      - name: passive-node-logs
        persistentVolumeClaim:
          claimName: passive-node-logs
      - configMap:
          name: passive-node-configmap
        name: configmap
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  annotations:
    kompose.cmd: kompose -f docker-compose.yml-guild-ops-ptn0 convert
    kompose.version: 1.21.0 (992df58d8)
    note: this is your local k8s cluster!
  labels:
    cardano_network: ptn0
    cardano_node_type: haskell
    environment: production
    io.kompose.service: passive-node
    project_name: guild-ops
    prometheus: enabled
  name: passive-node
  namespace: cardano-ptn0
spec:
  endpoints:
  - interval: 10s
    path: /metrics
    port: metrics
    targetPort: 13788
  namespaceSelector:
    matchNames:
    - cardano-ptn0
  selector:
    matchLabels:
      app.kubernetes.io/name: passive-node-metrics
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    note: this is your local k8s cluster!
  creationTimestamp: null
  labels:
    cardano_network: ptn0
    cardano_node_type: haskell
    environment: production
    io.kompose.service: passive-node-db
    project_name: guild-ops
  name: passive-node-db
  namespace: cardano-ptn0
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1000Mi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    note: this is your local k8s cluster!
  creationTimestamp: null
  labels:
    cardano_network: ptn0
    cardano_node_type: haskell
    environment: production
    io.kompose.service: passive-node-files
    project_name: guild-ops
  name: passive-node-files
  namespace: cardano-ptn0
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
  storageClassName: csi-s3
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    note: this is your local k8s cluster!
  creationTimestamp: null
  labels:
    cardano_network: ptn0
    cardano_node_type: haskell
    environment: production
    io.kompose.service: passive-node-logs
    project_name: guild-ops
  name: passive-node-logs
  namespace: cardano-ptn0
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1000Mi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    note: this is your local k8s cluster!
  creationTimestamp: null
  labels:
    cardano_network: ptn0
    cardano_node_type: haskell
    environment: production
    io.kompose.service: passive-node-priv
    project_name: guild-ops
  name: passive-node-priv
  namespace: cardano-ptn0
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
  storageClassName: csi-s3
