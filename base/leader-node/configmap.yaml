apiVersion: v1
kind: ConfigMap
metadata:
  name: leader-node
  namespace: cardano
  labels:
    app: cadano-node
data:
  initContainer-entrypoint: |
    rm -rf /opt/cardano/cnode/db/lost+found

    FILES="configuration.yaml genesis.json"

    for file in ${FILES}
    do
      test ! -e /opt/cardano/cnode/files.pvc/${file} && \
        cp /opt/cardano/cnode/files/${file} /opt/cardano/cnode/files.pvc/
    done

    if [ "${CNODE_USE_CONFIGMAP}" == "true" ]
    then
      for file in ${FILES}
      do
        test -e /configmap/${file} && \
          cp /configmap/${file} /opt/cardano/cnode/files.pvc/
      done
    fi

    NAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
    KUBE_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)

    echo '{"Producers":[]}' > /tmp/topology.json.tmp

    curl -sSk -H "Authorization: Bearer $KUBE_TOKEN" https://kubernetes.default.svc/api/v1/namespaces/${NAMESPACE}/pods  | jq -r '.items[].status | select(.phase="Running") | select(.containerStatuses[].name=="passive-node") | .podIP' | \
      while read ip
      do
        jq -r \
          --arg addr ${ip} \
          --arg port ${CNODE_PORT} \
          --arg valency 1 \
          '.Producers += [{"addr":$addr,"port":($port|tonumber),"valency":($valency|tonumber)}]' \
          /tmp/topology.json.tmp > /tmp/topology.json
          mv /tmp/topology.json /tmp/topology.json.tmp
      done

    cp /tmp/topology.json.tmp /opt/cardano/cnode/files.pvc/topology.json.${CNODE_ROLE}

    chown -R nobody: /opt/cardano || true

  configuration.yaml: |
    # global filter; messages must have at least this severity to pass:
    # Typical values would be Warning, Notice, Info or Debug
    minSeverity: Info
    
    # global file rotation settings:
    rotation:
      rpLogLimitBytes: 10000000
      rpKeepFilesNum:  10
      rpMaxAgeHours:   24
    
    # these backends are initialized:
    setupBackends:
      - KatipBK
      - EKGViewBK
    
    # if not indicated otherwise, then messages are passed to these backends:
    defaultBackends:
      - KatipBK
    
    # if wanted, the EKG interface is listening on this port:
    hasEKG: 12781
    
    hasPrometheus:
      - "0.0.0.0"
      - 13788
    
    # here we set up outputs of logging in 'katip':
    setupScribes:
      - scKind: StdoutSK
        scName: stdout
        scRotation: null
    
    # if not indicated otherwise, then log output is directed to this:
    defaultScribes:
      - - StdoutSK
        - stdout
    
    ## here we set up outputs of logging in 'katip':
    #setupScribes:
    #  #- scKind: FileSK
    #  #  scName: "/opt/cardano/cnode/logs/node-0.log"
    #  #  scFormat: ScText
    #  - scKind: FileSK
    #    scName: "/opt/cardano/cnode/logs/node-0.json"
    #    scFormat: ScJson
    #
    ## if not indicated otherwise, then log output is directed to this:
    #defaultScribes:
    #  #- - FileSK
    #  #  - "/opt/cardano/cnode/logs/node-0.log"
    #  - - FileSK
    #    - "/opt/cardano/cnode/logs/node-0.json"
    
    # more options which can be passed as key-value pairs:
    options:
      mapSubtrace:
        '#ekgview':
          contents:
          - - tag: Contains
              contents: 'cardano.epoch-validation.benchmark'
            - - tag: Contains
                contents: .monoclock.basic.
          - - tag: Contains
              contents: 'cardano.epoch-validation.benchmark'
            - - tag: Contains
                contents: diff.RTS.cpuNs.timed.
          - - tag: StartsWith
              contents: '#ekgview.#aggregation.cardano.epoch-validation.benchmark'
            - - tag: Contains
                contents: diff.RTS.gcNum.timed.
          subtrace: FilterTrace
        'cardano.epoch-validation.utxo-stats':
          # Change the `subtrace` value to `Neutral` in order to log
          # `UTxO`-related messages during epoch validation.
          subtrace: NoTrace
      mapBackends:
        cardano.node.ChainDB.metrics:
          - EKGViewBK
          - kind: UserDefinedBK
            name: LiveViewBackend
        cardano.node.metrics.Forge:
          - EKGViewBK
        cardano.node.metrics.Mempool:
          - EKGViewBK
        cardano.node.metrics:
          - EKGViewBK
          - kind: UserDefinedBK
            name: LiveViewBackend
        cardano.node.peers:
          - EKGViewBK
        cardano.node.BlockFetchDecision.peers:
          - EKGViewBK
          - kind: UserDefinedBK
            name: LiveViewBackend
    
    
    ##########################################################
    ############### Cardano Node Configuration ###############
    ##########################################################
    
    # NodeId:
    Protocol: TPraos
    NetworkName: phtn
    GenesisFile: /opt/cardano/cnode/files/genesis.json
    NumCoreNodes: 1
    RequiresNetworkMagic: RequiresMagic
    TurnOnLogging: True
    ViewMode: SimpleView
    TurnOnLogMetrics: False
    SocketPath: /opt/cardano/cnode/sockets/node0.socket
    
    ## For cardano-dbsync-tool
    EnableLogMetrics: False
    
    #####    Update Parameters    #####
    
    ApplicationName: cardano-sl
    ApplicationVersion: 0
    LastKnownBlockVersion-Major: 0
    LastKnownBlockVersion-Minor: 0
    LastKnownBlockVersion-Alt: 0
    
    #####         Tracing         #####
    
    # MinimalVerbosity: Minimal level of the rendering of captured items
    # MaximalVerbosity: Maximal level of the rendering of captured items
    # NormalVerbosity: the default level of the rendering of captured items
    TracingVerbosity: MaximalVerbosity
    
    # Trace BlockFetch client.
    TraceBlockFetchClient: True
    
    # Trace BlockFetch decisions made by the BlockFetch client.
    TraceBlockFetchDecisions: True
    
    # Trace BlockFetch protocol messages.
    TraceBlockFetchProtocol: True
    
    # Serialised Trace BlockFetch protocol messages.
    TraceBlockFetchProtocolSerialised: True
    
    # Trace BlockFetch server.
    TraceBlockFetchServer: True
    
    # Verbose tracer of ChainDB
    TraceChainDb: True
    
    # Trace ChainSync client.
    TraceChainSyncClient: True
    
    # Trace ChainSync server (blocks).
    TraceChainSyncBlockServer: True
    
    # Trace ChainSync server (headers)
    TraceChainSyncHeaderServer: True
    
    # Trace ChainSync protocol messages.
    TraceChainSyncProtocol: True
    
    # Trace DNS Resolver messages.
    TraceDNSResolver: False
    
    # Trace DNS Subscription messages.
    TraceDNSSubscription: False
    
    # Trace error policy resolution.
    TraceErrorPolicy: True
    
    # Trace local error policy resolution.
    TraceLocalErrorPolicy: True
    
    # Trace block forging.
    TraceForge: True
    
    # Trace Handshake protocol messages.
    TraceHandshake: True
    
    # Trace IP Subscription messages.
    TraceIpSubscription: True
    
    # Trace local ChainSync protocol messages.
    TraceLocalChainSyncProtocol: True
    
    # Trace local Handshake protocol messages.
    TraceLocalHandshake: False
    
    # Trace local TxSubmission protocol messages.
    TraceLocalTxSubmissionProtocol: True
    
    # Trace local TxSubmission server.
    TraceLocalTxSubmissionServer: True
    
    # Trace mempool.
    TraceMempool: True
    
    # Trace Mux Events
    TraceMux: False
    
    # Trace TxSubmission server (inbound transactions).
    TraceTxInbound: True
    
    # Trace TxSubmission client (outbound transactions).
    TraceTxOutbound: True
    
    # Trace TxSubmission protocol messages.
    TraceTxSubmissionProtocol: True
